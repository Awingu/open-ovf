#!/usr/bin/python
# vi: ts=4 expandtab syntax=python
##############################################################################
# Copyright (c) 2008 IBM Corporation
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
# David Leskovec (IBM) - initial implementation
# Eric Casler    (IBM)
##############################################################################
"""
This file implements the ova command.  The functions provided so far are:
manifest - create a manifest file
pack - package an appliance into an ova file
unpack - un-packages an ova file into a set of files comprising the appliance
validate - validate the package, currently only checks the the file digests
runtime - deploy ovf using libvirt
"""

import os
import sys
import libvirt

from ovf.commands import cli
from ovf.commands import VERSION_STR
from ovf.OvfFile import OvfFile
from ovf.OvfReferencedFile import OvfReferencedFile
from ovf.OvfSet import OvfSet
from ovf.OvfManifest import writeManifestFromReferencedFilesList

def makeManifest(options, args):
    """
    Handle ova command to create a manifest file
    @type options : options object returned by parse_args
    @param options: ovfFile is required
    @type args    : list of positional arguments returned by parse_args
    @param args   : manifest file name is first (and only) argument if
                    specified.  if not, file name is formed from ovf file name
    """
    manifestFile = options.manifestFile
    if manifestFile == None:
        manifestFile = os.path.splitext(options.ovfFile)[0] + '.mf'

    ovfFileObj = OvfFile(options.ovfFile)

    fileList = ovfFileObj.files
    # writeManifest expects the ovf as the first file.  insert it there
    # create a referenced file object for the ovf
    ovfRefFile = OvfReferencedFile(ovfFileObj.path, ovfFileObj.path)
    fileList.insert(0, ovfRefFile)
    writeManifestFromReferencedFilesList(manifestFile, fileList)

def validateAppliance(options, args):
    """
    Validate an appliance pacakge
    @type options : object returned by parseArgs
    @param options: ovfFile is required
    @type args    : List of Strings
    @param args   : positional arguments returned by parseArgs

    @rtype: Boolean
    @return: True - all tests passed, False - one or more tests failed
    """
    # Call method to verify the manifest sums
    ovfSet = OvfSet(options.ovfFile)

    if ovfSet.manifest == None and options.manifestFile == None:
        print 'No manifest file for package, skipping sum verification'
        return

    result = ovfSet.verifyManifest(options.manifestFile)

    if result == False:
        print "checkFileDigests detected a mismatch"

    # TODO: validate the certificate

    print 'All tests passed'

def packOva(options, args):
    """
    Package an appliance into an archive file using tar.
    @type options : options object returned by parse_args
    @param options: ovfFile is required
    @type args    : list of positional arguments returned by parse_args
    @param args   : manifest file name is first (and only) argument if
                    specified.  if not, file name is formed from ovf file name
    """
    outFile = options.output
    if outFile == None:
        # Base the output file name on the ovf file name
        outFile = os.path.splitext(options.ovfFile)[0] + '.ova'

    ovfSet = OvfSet(options.ovfFile)

    if options.noManifest == False:
        manifestFile = options.manifestFile
        if manifestFile == None:
            # Base the manifest file name on the ovf file name
            manifestFile = os.path.splitext(options.ovfFile)[0] + '.mf'
        elif os.path.isfile(manifestFile) == False:
            raise ValueError('Specified manifest file does not exist')
    else:
        ovfSet.manifest = None

    # add the certificate file if needed
    if options.noCertificate == False:
        certificateFile = options.certificateFile
        if certificateFile == None:
            # Base the manifest file name on the ovf file name
            certificateFile = os.path.splitext(options.ovfFile)[0] + '.cert'
        elif os.path.isfile(certificateFile) == False:
            raise ValueError('Specified certificate file does not exist')
    else:
        ovfSet.certificate = None

    ovfSet.writeAsTar(outFile)

def unpackOva(options, args):
    """
    Unpackage an appliance from an archive file
    @type options : object returned by parse_args
    @param options: ovfFile is required
    @type args    : list of positional arguments returned by parse_args
    @param args   : manifest file name is first (and only) argument if
                    specified.  if not, file name is formed from ovf file name
    """
    ovaSet = OvfSet(options.ovfFile, "r")
    ovaSet.writeAsDir(options.targetDir)

def run(options, args):
    """Deploy a vm"""

    # Open libvirt connection
    conn = libvirt.open(options.connect)

    if os.path.isfile(options.ovfFile):
        # Instantiate OvfSet instance for OVF file
        ovf = OvfSet(options.ovfFile)

        # Boot Virtual Machines
        ovf.boot(conn)
        sys.exit(0)

    else:
        raise IOError(MISSING_FILE)

def main():
    """
    main routine for this program
    """
    cmdUsage = "ova command -f <file> [options]"
    cliParser = cli.CLI(COMMANDS, COMMON_OPTS, cmdUsage, VERSION_STR)
    command, options, args = cliParser.parseArgs()

    try:
        COMMANDS[command]['function'](options, args)

    except ValueError, inst:
        print 'Parameter error: ' + inst.__str__() + "\n"
        #subParser.parse_args(['--help'])
    except Exception:
        excTuple = sys.exc_info()
        print 'Command failed: ',  excTuple[0].__name__, '-', excTuple[1]

MISSING_FILE = "Ovf file not found."

COMMANDS = {

    "manifest" :
    {
        'function' : makeManifest,
        'help' : "Create a manifest file with SHA-1 sum for each " +
                 "referenced file",
        'args' : (
        {
            'flags' : ['-o', '--ofile'],
            'parms' : {'dest' : 'manifestFile',
                       'help' : "Output manifest file"}
        },
        )
    },

    "validate" :
    {
        'function' : validateAppliance,
        'help' : "Validate the virtual appliance pakage",
        'args' : (
        {
            'flags' : ['-m', '--manifest'],
            'parms' : {'dest' : 'manifestFile', 'help' : "Manifest file"}
        },
        {
            'flags' : ['-c', '--cert'],
            'parms' : {'dest' : 'certFile', 'help' : "Certificate file"}
        }
        )
    },

    "pack" :
    {
        'function' : packOva,
        'help' : "Packs a set of files comprising a virtual appliance into " +
                 "a single file in the tar format",
        'args' : (
        {
            'flags' : ['-o', '--output'],
            'parms' : {'dest' : 'output',
                       'help' : "Output package file (- stdout)"}
        },
        {
            'flags' : ['-m', '--manifestfile'],
            'parms' : {'dest' : 'manifestFile',
                       'help' : "Manifest file to include in archive"}
        },
        {
            'flags' : ['-c', '--certificatefile'],
            'parms' : {'dest' : 'certificateFile',
                       'help' : "Certificate file to include in archive"}
        },
        {
            'flags' : ['-n', '--no-manifest'],
            'parms' : {'dest' : 'noManifest', 'action' : "store_true",
                       'default' : False,
                       'help' : "Do not store manifest file in the archive."}
        },
        {
            'flags' : ['-r', '--no-certificate'],
            'parms' : {'dest' : 'noCertificate', 'action' : "store_true",
                       'default' : False,
                       'help' :
                           "Do not store a certificate file in the archive."}
        }
        )
    },

    "unpack" :
    {
        'function' : unpackOva,
        'help' : "Unpack an ova package",
        'args' : (
        {
            'flags' : ['-d', '--directory'],
            'parms' : {'dest' : 'targetDir', 'default' : '.',
                       'help' : "Target directory where files will be stored"}
        },
        )
    },

    "runtime" :
    {
        "function" : run,
        "help" : "Deploy the virtual systems of an OVF file as " +
                 "libvirt domains",
        "args" : (
        {
            "flags" : ["-c", "--connect"],
            "parms" : {"dest"    : "connect",
                       "help"    : "libvirt connection URI",
                       "metavar" : "URI"},
            "required": True
        },
        )
    },
}

COMMON_OPTS = (
    {
        "flags" : [ "-f", "--file" ],
        "parms" : { "dest"    : "ovfFile",
                    "help"    : "path to OVF file.",
                    "metavar" : "PATH"},
        "required": True
    },
)

if __name__ == "__main__":
    main()

