#!/usr/bin/python
# vi: ts=4 expandtab syntax=python
##############################################################################
# Copyright (c) 2008 IBM Corporation
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
# David Leskovec (IBM) - initial implementation
# Eric Casler    (IBM)
##############################################################################
"""
This file implements the ova command.  The functions provided so far are:
manifest - create a manifest file
runtime - deploy ovf using libvirt
"""

import os
import sys
import libvirt

from ovf.commands import cli
from ovf.commands import VERSION_STR
from ovf.OvfFile import OvfFile
from ovf.OvfReferencedFile import OvfReferencedFile
from ovf.OvfSet import OvfSet
from ovf.OvfManifest import writeManifestFromReferencedFilesList

def makeManifest(options, args):
    """
    Handle ova command to create a manifest file
    @type options : options object returned by parse_args
    @param options: ovfFile is required
    @type args    : list of positional arguments returned by parse_args
    @param args   : manifest file name is first (and only) argument if
                    specified.  if not, file name is formed from ovf file name
    """
    manifestFile = options.manifestFile
    if manifestFile == None:
        manifestFile = os.path.splitext(options.ovfFile)[0] + '.mf'

    ovfFileObj = OvfFile(options.ovfFile)

    fileList = ovfFileObj.files
    # writeManifest expects the ovf as the first file.  insert it there
    # create a referenced file object for the ovf
    ovfRefFile = OvfReferencedFile(ovfFileObj.path, ovfFileObj.path)
    fileList.insert(0, ovfRefFile)
    writeManifestFromReferencedFilesList(manifestFile, fileList)

def run(options, args):
    """Deploy a vm"""

    # Open libvirt connection
    conn = libvirt.open(options.connect)

    if os.path.isfile(options.ovfFile):
        # Instantiate OvfSet instance for OVF file
        ovf = OvfSet(options.ovfFile)

        # Boot Virtual Machines
        ovf.boot(conn)
        sys.exit(0)

    else:
        raise IOError(MISSING_FILE)

def main():
    """
    main routine for this program
    """
    cmdUsage = "ova command -f <file> [options]"
    cliParser = cli.CLI(COMMANDS, COMMON_OPTS, cmdUsage, VERSION_STR)
    command, options, args = cliParser.parseArgs()

    try:
        COMMANDS[command]['function'](options, args)

    except ValueError, inst:
        print 'Parameter error: ' + inst.__str__() + "\n"
        #subParser.parse_args(['--help'])
    except Exception:
        excTuple = sys.exc_info()
        print 'Command failed: ',  excTuple[0].__name__, '-', excTuple[1]

MISSING_FILE = "Ovf file not found."

COMMANDS = {

    "manifest" :
    {
        'function' : makeManifest,
        'help' : "Create a manifest file with SHA-1 sum for each " +
                 "referenced file",
        'args' : (
        {
            'flags' : ['-o', '--ofile'],
            'parms' : {'dest' : 'manifestFile',
                       'help' : "Output manifest file"}
        },
        )
    },

    "runtime" :
    {
        "function" : run,
        "help" : "Deploy the virtual systems of an OVF file as " +
                 "libvirt domains",
        "args" : (
        {
            "flags" : ["-c", "--connect"],
            "parms" : {"dest"    : "connect",
                       "help"    : "libvirt connection URI",
                       "metavar" : "URI"},
            "required": True
        },
        )
    },
}

COMMON_OPTS = (
    {
        "flags" : [ "-f", "--file" ],
        "parms" : { "dest"    : "ovfFile",
                    "help"    : "path to OVF file.",
                    "metavar" : "PATH"},
        "required": True
    },
)

if __name__ == "__main__":
    main()

